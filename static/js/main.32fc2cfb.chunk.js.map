{"version":3,"sources":["Gallery/Gallery.js","Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","this","props","links","length","react_default","a","createElement","map","url","href","target","rel","src","alt","React","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","handleURLInputChange","bind","assertThisInitialized","handleURLButtonClick","event","setState","value","match","console","log","ImageDownload","preventDefault","URL","_this2","request","XMLHttpRequest","open","responseType","onload","response","concat","handler","send","onSubmit","id","type","placeholder","onChange","App","fetching","updateState","linksList","className","src_Form_Form","src_Gallery_Gallery","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAgBeA,mLAZP,OAAGC,KAAKC,MAAMC,MAAMC,OAAS,EAClBC,EAAAC,EAAAC,cAAA,kCAEAN,KAAKC,MAAMC,MAAMK,IAAI,SAAAC,GAAG,OAC3BJ,EAAAC,EAAAC,cAAA,KAAGG,KAAMD,EAAG,KAAH,YAA4BE,OAAO,SAASC,IAAI,uBACrDP,EAAAC,EAAAC,cAAA,OAAKM,IAAKJ,EAAG,KAAH,YAA4BK,IAAI,yBAPxCC,IAAMC,WCgEbC,cA/DX,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KACDsB,MAAQ,CACTC,WAAY,IAGhBP,EAAKQ,qBAAuBR,EAAKQ,qBAAqBC,KAA1BR,OAAAS,EAAA,EAAAT,CAAAD,IAC5BA,EAAKW,qBAAuBX,EAAKW,qBAAqBF,KAA1BR,OAAAS,EAAA,EAAAT,CAAAD,IAPbA,oFAUEY,GACjB7B,KAAK8B,SAAS,CAACN,WAAYK,EAAMnB,OAAOqB,qDAGvBF,GAId7B,KAAKuB,MAAMC,WAAWQ,MAFb,kDAGRC,QAAQC,IAAI,YACZlC,KAAKmC,cAAcnC,KAAKuB,MAAMC,aAE9BS,QAAQC,IAAI,gBAEhBlC,KAAK8B,SAAS,CACVN,WAAY,KAGhBK,EAAMO,uDAGIC,GAAK,IAAAC,EAAAtC,KACXuC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOJ,EAAM,UAC1BE,EAAQG,aAAe,OACvBH,EAAQI,OAAS,WACb,IAAIC,EAAWL,EAAQK,SAAR,uDACfX,QAAQC,IAAIU,GACZX,QAAQC,IAAR,aAAAW,OAAyBP,EAAKrC,MAAME,SACpCmC,EAAKrC,MAAM6C,QAAQF,IAEvBL,EAAQQ,wCAIR,OACI3C,EAAAC,EAAAC,cAAA,QAAM0C,SAAUhD,KAAK4B,sBACjBxB,EAAAC,EAAAC,cAAA,SACI2C,GAAG,MACHC,KAAK,OACLnB,MAAO/B,KAAKuB,MAAMC,WAClB2B,YAAY,2CACZC,SAAUpD,KAAKyB,uBAEnBrB,EAAAC,EAAAC,cAAA,SACI4C,KAAK,SACLnB,MAAM,uDAzDPjB,IAAMC,WCiCVsC,qBA7BX,SAAAA,EAAYpD,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAqD,IACfpC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAmC,GAAA/B,KAAAtB,KAAMC,KACDsB,MAAQ,CACTrB,MAAO,GACPoD,UAAU,GAGdrC,EAAKsC,YAActC,EAAKsC,YAAY7B,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IAPJA,2EAUPuC,GACRxD,KAAK8B,SAAS,CACV5B,MAAOsD,EACPF,UAAU,qCAKd,OACIlD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACXrD,EAAAC,EAAAC,cAACoD,EAAD,CAAMZ,QAAS9C,KAAKuD,cACpBnD,EAAAC,EAAAC,cAAA,OAAK2C,GAAG,qBACJ7C,EAAAC,EAAAC,cAACqD,EAAD,CAASzD,MAAOF,KAAKuB,MAAMrB,iBAvB7BY,IAAMC,YCOJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCbNgC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.32fc2cfb.chunk.js","sourcesContent":["import React from 'react';\n\nclass Gallery extends React.Component{\n    render() {\n        if(this.props.links.length < 1) {\n            return <p>use link to download!</p>\n        } else {\n            return this.props.links.map(url => (\n                <a href={url['node']['display_url']} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img src={url['node']['display_url']} alt=\"downloaded\"/>\n                </a>\n            ));\n        }\n    }\n}\n\nexport default Gallery;","import React from 'react';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValue: '',\n        };\n\n        this.handleURLInputChange = this.handleURLInputChange.bind(this);\n        this.handleURLButtonClick = this.handleURLButtonClick.bind(this);\n    }\n\n    handleURLInputChange(event) { // Установка value при изменении текста в input\n        this.setState({inputValue: event.target.value});\n    }\n\n    handleURLButtonClick(event) { // Клик по кнопке\n        //https://www.instagram.com/p/BwZX4QRH2JM/\n        let regex = /https:\\/\\/www.instagram.com\\/p\\/[\\w\\d+_-]*\\//i;\n\n        if(this.state.inputValue.match(regex)) {\n            console.log('Correct!');\n            this.ImageDownload(this.state.inputValue);\n        } else {\n            console.log('Invalid URL!');\n        }\n        this.setState({\n            inputValue: '',\n        });\n\n        event.preventDefault();\n    }\n\n    ImageDownload(URL) {\n        let request = new XMLHttpRequest();\n        request.open('GET', URL + '?__a=1');\n        request.responseType = 'json';\n        request.onload = () => {\n            let response = request.response['graphql']['shortcode_media']['edge_sidecar_to_children']['edges'];\n            console.log(response);\n            console.log(`props len ${this.props.length}`);\n            this.props.handler(response);\n        };\n        request.send();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleURLButtonClick}>\n                <input\n                    id=\"URL\"\n                    type=\"text\"\n                    value={this.state.inputValue}\n                    placeholder=\"https://www.instagram.com/p/BwcKFP4nQ-o/\"\n                    onChange={this.handleURLInputChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Скачать\"\n                />\n            </form>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport Gallery from './Gallery/Gallery';\nimport Form from './Form/Form';\nimport './App.css';\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            links: [],\n            fetching: true,\n        };\n\n        this.updateState = this.updateState.bind(this);\n    }\n\n    updateState(linksList) {\n        this.setState({\n            links: linksList,\n            fetching: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Form handler={this.updateState}/>\n                <div id=\"Gallery-container\">\n                    <Gallery links={this.state.links}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}